{% extends 'base' %}

{% block content %}
<section class="section">
    <div class="container">
        <h2 class="title is-2">Submit Flight</h2>

        <h3 class="title is-4">IGC Upload</h3>
        <p>Pre-fill the form below by uploading an IGC file.</p>
        <div class="file">
            <label class="file-label">
                <input class="file-input" type="file" id="igcFile">
                <span class="file-cta">
                    <span class="file-icon">
                        <i class="fas fa-upload"></i>
                    </span>
                    <span class="file-label">
                        Choose a fileâ€¦
                    </span>
                </span>
            </label>
        </div>

        <h3 class="title is-4">Flight details</h3>

        <label class="label" for="number">Flight Number</label>
        <div class="field">
            <div class="control has-icons-left">
                <input class="input" type="number" id="number" name="number">
                <div class="icon is-small is-left">
                    <i class="fas fa-list-ol"></i>
                </div>
            </div>
        </div>

        <label class="label" for="aircraft">Aircraft</label>
        <div class="field">
            <div class="control is-expanded has-icons-left">
                <div class="select is-fullwidth">
                    <select name="aircraft" id="aircraft">
                        {% for aircraft in aircraft_list %}
                        <option value="{{ aircraft.id }}">{{ aircraft.manufacturer }} {{ aircraft.model }}</option>
                        {% endfor %}
                    </select>
                    <div class="icon is-small is-left">
                        <i class="fas fa-parachute-box"></i>
                    </div>
                </div>
            </div>
        </div>

        <label class="label" for="launchSite">Launch Site</label>
        <div class="field">
            <div class="control has-icons-left">
                <input class="input" type="text" id="launchSite" name="launchSite">
                <div class="icon is-small is-left">
                    <i class="fas fa-plane-departure"></i>
                </div>
            </div>
        </div>

        <label class="label" for="landingSite">Landing Site</label>
        <div class="field">
            <div class="control has-icons-left">
                <input class="input" type="text" id="landingSite", name="landingSite">
                <div class="icon is-small is-left">
                    <i class="fas fa-plane-arrival"></i>
                </div>
            </div>
        </div>


        <label class="label" for="launchDate">Launch Date</label>
        <div class="field">
            <div class="control has-icons-left">
                <input class="input" type="date" id="launchDate" name="launchDate">
                <div class="icon is-small is-left">
                    <i class="fas fa-calendar-alt"></i>
                </div>
            </div>
        </div>

        <label class="label" for="launchTime">Launch Time</label>
        <div class="field">
            <div class="control has-icons-left">
                <input class="input" type="time" step="60" id="launchTime" name="launchTime">
                <div class="icon is-small is-left">
                    <i class="fas fa-clock"></i>
                </div>
            </div>
        </div>

        <label class="label" for="landingTime">Landing Time</label>
        <div class="field has-addons">
            <div class="control is-expanded has-icons-left">
                <input class="input" type="time" step="60" id="landingTime" name="landingTime">
                <div class="icon is-small is-left">
                    <i class="fas fa-clock"></i>
                </div>
            </div>
            <p class="control" id="flightDuration" style="display: none;">
                <a class="button is-static"></a>
            </p>
        </div>
    </div>
</section>

<script>
    const aircraftList = [
        {%- for aircraft in aircraft_list %}
        {
            "id": {{ aircraft.id }},
            "model": {{ aircraft.model | safe | json_encode() }},
            "manufacturer": {{ aircraft.manufacturer | safe | json_encode() }},
        },
        {%- endfor %}
    ];

    /**
     * Match an aircraft name against the list of aircraft.
     * If the model or the manufacturer + model match, return the corresponding id.
     * Otherwise, return null.
     */
    aircraftList.match = function(value) {
        if (value) {
            for (aircraft of this) {
                if (value === aircraft.model) {
                    return aircraft.id;
                }
                if (value === `${aircraft.manufacturer} ${aircraft.model}`) {
                    return aircraft.id;
                }
            }
        }
        return null;
    }

    function hmsToTimevalue(hms) {
        const hours = hms[0];
        const minutes = Math.round(hms[1] + hms[2] / 100);
        return `${hours}:${minutes}`;
    }

    function recalculateDuration() {
        const launchTime = document.getElementById('launchTime').value;
        const landingTime = document.getElementById('landingTime').value;
        const flightDuration = document.getElementById('flightDuration');
        if (launchTime && landingTime) {
            const [launchHour, launchMinute] = launchTime.split(':').map(v => parseInt(v));
            const [landingHour, landingMinute] = landingTime.split(':').map(v => parseInt(v));

            const launch = launchHour * 60 + launchMinute;
            const landing = landingHour * 60 + landingMinute;
            let duration = landing - launch;
            if (duration < 0) {
                duration += 1440;
            }
            const hours = Math.floor(duration / 60);
            const minutes = duration % 60;

            flightDuration.children[0].text = `+${hours}:${minutes}`;
            flightDuration.style.display = 'block';
        } else {
            flightDuration.children[0].text = '';
            flightDuration.style.display = 'none';
        }
    }

    function processData(data) {
        console.log('data: ', data);

        // Determine aircraft
        const aircraftId = aircraftList.match(data.glidertype);
        if (aircraftId !== null) {
            const options = document.querySelector('select[name=aircraft]');
            for (const option of options.children) {
                if (option.value === aircraftId.toString()) {
                    option.selected = true;
                    break;
                }
            }
        }

        // Determine flight date
        if (data.date_ymd) {
            const launchDate = document.querySelector('input[name=launchDate]');
            const y = data.date_ymd[0].toString();
            const m = data.date_ymd[1].toString().padStart(2, '0');
            const d = data.date_ymd[2].toString().padStart(2, '0');
            launchDate.value = `${y}-${m}-${d}`;
        }

        // Determine launch time
        if (data.launch && data.launch.time_hms) {
            const launchTime = document.querySelector('input[name=launchTime]');
            launchTime.value = hmsToTimevalue(data.launch.time_hms);
        }

        // Determine landing time
        if (data.landing && data.landing.time_hms) {
            const landingTime = document.querySelector('input[name=landingTime]');
            landingTime.value = hmsToTimevalue(data.landing.time_hms);
        }

        recalculateDuration();
    }

    function submitIgc(blob) {
        console.log('Submitting data');
        const request = new Request('/submit/process_igc/', {
            method: 'POST',
            mode: 'same-origin',
            headers: new Headers({'content-type': 'application/octet-stream'}),
            body: blob,
        });
        return fetch(request)
            .then((response) => {
                if (response.ok) {
                    response.json().then((data) => {
                        if (data.type === 'success') {
                            processData(data);
                        } else if (data.type === 'error') {
                            throw new Error(data.error);
                        } else {
                            throw new Error('Malformed response');
                        }
                    });
                } else {
                    throw new Error(`HTTP ${response.status}`);
                }
            });
    };

    document.getElementById('igcFile').addEventListener('change', (e) => {
        console.log('Change', e);
        if (e.target.files && e.target.files[0]) {
            const file = e.target.files[0];
            submitIgc(file)
                .catch((e) => {
                    alert(`Could not process IGC file: ${e}`);
                });
        }
    });

    document.getElementById('launchTime').addEventListener('change', recalculateDuration);
    document.getElementById('landingTime').addEventListener('change', recalculateDuration);
</script>
{% endblock %}
