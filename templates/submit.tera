{% extends 'base' %}

{% block sectionclass %}submitform{% endblock %}

{% block content %}
<h2 class="title is-2">Submit Flight</h2>

{% if error_msg %}
<div class="notification is-danger">{{ error_msg }}</div>
{% endif %}

<p class="content">Fill out this form to submit a flight. If you upload an IGC
file, some of the fields will be automatically filled for you.</p>

<div class="spaced-headers">

<h3 class="title is-4">Basic Information</h3>

<label class="label">IGC Flight Recording</label>
<div class="field">
    <div class="file has-name">
        <label class="file-label">
            <input class="file-input" type="file" name="igc_file" id="igcFile" accept=".igc">
            <span class="file-cta">
                <span class="file-icon">
                    <i class="fas fa-upload"></i>
                </span>
                <span class="file-label">
                    Click to upload IGC file
                </span>
            </span>
            <span class="file-name" id="igcFilename">No file selectedâ€¦</span>
        </label>
    </div>
</div>

<!-- Start form later in order not to include the file upload. -->
<form action="" method="post">

<input class="is-hidden" type="text" id="igcData" name="igc_data">

<label class="label" for="number">Flight Number</label>
<div class="field">
    <div class="control has-icons-left">
        <input class="input" type="number" id="number" name="number">
        <div class="icon is-small is-left">
            <i class="fas fa-list-ol"></i>
        </div>
    </div>
</div>

<label class="label" for="aircraft">Aircraft</label>
<div class="field">
    <div class="control is-expanded has-icons-left">
        <div class="select is-fullwidth">
            <select name="aircraft" id="aircraft">
                <option value=""></option>
                {% for aircraft in aircraft_list %}
                <option value="{{ aircraft.id }}"{% if user.last_aircraft_id == aircraft.id %} selected{% endif %}>{{ aircraft.manufacturer }} {{ aircraft.model }}</option>
                {% endfor %}
            </select>
            <div class="icon is-small is-left">
                <i class="fas fa-parachute-box"></i>
            </div>
        </div>
    </div>
</div>


<h3 class="title is-4">Launch &amp; Landing</h3>

<div class="columns">
    <div class="column">
        <label class="label" for="launchSite">Launch Site</label>
        <div class="control is-expanded has-icons-left">
            <div class="select is-fullwidth">
                <select name="launch_site" id="launchSite">
                    <option value="" selected></option>
                    {% for location in locations %}
                    <option value="{{ location.id }}">{{ location.name }} [{{ location.country }}, {{ location.elevation }} m]</option>
                    {% endfor %}
                </select>
                <div class="icon is-small is-left">
                    <i class="fas fa-plane-departure"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="column">
        <label class="label" for="landingSite">Landing Site</label>
        <div class="control is-expanded has-icons-left">
            <div class="select is-fullwidth">
                <select name="landing_site" id="landingSite">
                    <option value="" selected></option>
                    {% for location in locations %}
                    <option value="{{ location.id }}">{{ location.name }} [{{ location.country }}, {{ location.elevation }} m]</option>
                    {% endfor %}
                </select>
                <div class="icon is-small is-left">
                    <i class="fas fa-plane-arrival"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="columns">
    <div class="column">
        <label class="label" for="launchDate">Launch Date</label>
        <div class="field">
            <div class="control has-icons-left">
                <input class="input" type="date" id="launchDate" name="launch_date">
                <div class="icon is-small is-left">
                    <i class="fas fa-calendar-alt"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="column">
        <label class="label" for="launchTime">Launch Time</label>
        <div class="field">
            <div class="control has-icons-left">
                <input class="input" type="time" step="60" id="launchTime" name="launch_time">
                <div class="icon is-small is-left">
                    <i class="fas fa-clock"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="column">
        <label class="label" for="landingTime">Landing Time</label>
        <div class="field has-addons">
            <div class="control is-expanded has-icons-left">
                <input class="input" type="time" step="60" id="landingTime" name="landing_time">
                <div class="icon is-small is-left">
                    <i class="fas fa-clock"></i>
                </div>
            </div>
            <p class="control is-hidden" id="flightDuration">
                <a class="button is-static"></a>
            </p>
        </div>
    </div>
</div>

<h3 class="title is-4">GPS Track</h3>

<label class="label" for="trackDistance">GPS Track Distance</label>
<div class="field has-addons">
    <div class="control is-expanded has-icons-left">
        <input class="input" type="number" min="0.0" step="0.01" id="trackDistance" name="track_distance">
        <div class="icon is-small is-left">
            <i class="fas fa-ruler"></i>
        </div>
    </div>
    <p class="control">
        <a class="button is-static">km</a>
    </p>
</div>

<h3 class="title is-4">XContest</h3>

<div class="columns">
    <div class="column">
        <label class="label" for="xcontestTracktype">XContest Track Type</label>
        <div class="field">
            <div class="control is-expanded has-icons-left">
                <div class="select is-fullwidth">
                    <select name="xcontest_tracktype" id="xcontestTracktype">
                        <option value="" selected></option>
                        <option value="free_flight">Free Flight</option>
                        <option value="flat_triangle">Flat Triangle</option>
                        <option value="fai_triangle">FAI Triangle</option>
                    </select>
                    <div class="icon is-small is-left">
                        <i class="fas fa-globe-americas"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="column">
        <label class="label" for="xcontestDistance">XContest Scored Distance</label>
        <div class="field has-addons">
            <div class="control is-expanded has-icons-left">
                <input class="input" type="number" min="0.0" step="0.01" id="xcontestDistance" name="xcontest_distance">
                <div class="icon is-small is-left">
                    <i class="fas fa-ruler"></i>
                </div>
            </div>
            <p class="control">
                <a class="button is-static">km</a>
            </p>
        </div>
    </div>
</div>

<label class="label" for="xcontestUrl">XContest URL</label>
<div class="field">
    <div class="control has-icons-left">
        <input class="input" type="url" pattern="https?://.*" id="xcontestUrl" name="xcontest_url" placeholder="https://www.xcontest.org/...">
        <div class="icon is-small is-left">
            <i class="fas fa-link"></i>
        </div>
    </div>
</div>

<h3 class="title is-4">Other</h3>

<label class="label" for="comment">Comment</label>
<div class="field">
    <div class="control">
        <textarea class="textarea" id="comment" name="comment" placeholder="Describe your flight"></textarea>
    </div>
</div>

<label class="label" for="videoUrl">Video URL</label>
<div class="field">
    <div class="control has-icons-left">
        <input class="input" type="url" pattern="https?://.*" id="videoUrl" name="video_url" placeholder="https://www.youtube.com/...">
        <div class="icon is-small is-left">
            <i class="fas fa-film"></i>
        </div>
    </div>
</div>

<div class="control submitcontrols">
    <button type="submit" class="button is-info">Submit</button>
</div>

</form>

</div>

<script>
    const aircraftList = [
        {%- for aircraft in aircraft_list %}
        {
            "id": {{ aircraft.id }},
            "model": {{ aircraft.model | safe | json_encode() }},
            "manufacturer": {{ aircraft.manufacturer | safe | json_encode() }},
        },
        {%- endfor %}
    ];

    /**
     * Match an aircraft name against the list of aircraft.
     * If the model or the manufacturer + model match, return the corresponding id.
     * Otherwise, return null.
     */
    aircraftList.match = function(value) {
        if (value) {
            for (aircraft of this) {
                if (value === aircraft.model) {
                    return aircraft.id;
                }
                if (value === `${aircraft.manufacturer} ${aircraft.model}`) {
                    return aircraft.id;
                }
            }
        }
        return null;
    }

    function hmsToTimevalue(hms) {
        const hours = hms[0].toString().padStart(2, '0');
        const minutes = Math.round(hms[1] + hms[2] / 100).toString().padStart(2, '0');
        return `${hours}:${minutes}`;
    }

    function recalculateDuration() {
        const launchTime = document.getElementById('launchTime').value;
        const landingTime = document.getElementById('landingTime').value;
        const flightDuration = document.getElementById('flightDuration');
        if (launchTime && landingTime) {
            const [launchHour, launchMinute] = launchTime.split(':').map(v => parseInt(v));
            const [landingHour, landingMinute] = landingTime.split(':').map(v => parseInt(v));

            const launch = launchHour * 60 + launchMinute;
            const landing = landingHour * 60 + landingMinute;
            let duration = landing - launch;
            if (duration < 0) {
                duration += 1440;
            }
            const hours = Math.floor(duration / 60);
            const minutes = duration % 60;

            flightDuration.children[0].text = `+${hours}:${minutes}`;
            flightDuration.classList.remove('is-hidden');
        } else {
            flightDuration.children[0].text = '';
            flightDuration.classList.add('is-hidden');
        }
    }

    function processData(data) {
        console.log('data: ', data);

        // Determine aircraft
        const aircraftId = aircraftList.match(data.glidertype);
        if (aircraftId !== null) {
            const options = document.querySelector('select#aircraft');
            for (const option of options.children) {
                if (option.value === aircraftId.toString()) {
                    option.selected = true;
                    break;
                }
            }
        }

        // Determine flight date
        if (data.date_ymd) {
            const launchDate = document.querySelector('input#launchDate');
            const y = data.date_ymd[0].toString();
            const m = data.date_ymd[1].toString().padStart(2, '0');
            const d = data.date_ymd[2].toString().padStart(2, '0');
            launchDate.value = `${y}-${m}-${d}`;
        }

        // Determine launch time
        if (data.launch && data.launch.time_hms) {
            const launchTime = document.querySelector('input#launchTime');
            launchTime.value = hmsToTimevalue(data.launch.time_hms);
        }

        // Determine landing time
        if (data.landing && data.landing.time_hms) {
            const landingTime = document.querySelector('input#landingTime');
            landingTime.value = hmsToTimevalue(data.landing.time_hms);
        }

        // Determine track distance
        const trackDistance = document.querySelector('input#trackDistance');
        trackDistance.value = data.track_distance.toFixed(2);

        recalculateDuration();
    }

    function submitIgc(blob) {
        console.log('Submitting data');
        const request = new Request('/flights/add/process_igc/', {
            method: 'POST',
            mode: 'same-origin',
            headers: new Headers({'content-type': 'application/octet-stream'}),
            body: blob,
        });
        return fetch(request)
            .then((response) => {
                if (response.ok) {
                    response.json().then((data) => {
                        if (data.type === 'success') {
                            processData(data);
                        } else if (data.type === 'error') {
                            throw new Error(data.error);
                        } else {
                            throw new Error('Malformed response');
                        }
                    });
                } else {
                    throw new Error(`HTTP ${response.status}`);
                }
            });
    };

    document.getElementById('igcFile').addEventListener('change', (e) => {
        console.log('Change', e);
        if (e.target.files && e.target.files[0]) {
            const file = e.target.files[0];
            submitIgc(file)
                .then(() => {
                    // Because multipart form submissions suck, we convert the file to base64
                    // and submit it as text. Not nice either, but at least allows us to use
                    // regular form parsing. And because we want to store the file in the database,
                    // we can't stream it to disk anyways.
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const binaryString = e.target.result;
                        // TODO: btoa cannot handle unicode
                        document.getElementById('igcData').value = btoa(binaryString).replace('+', '-').replace('/', '_');
                    }
                    reader.readAsBinaryString(file);
                    document.getElementById('igcFilename').textContent = file.name;
                })
                .catch((e) => {
                    alert(`Could not process IGC file: ${e}`);
                });
        }
    });

    document.getElementById('launchTime').addEventListener('change', recalculateDuration);
    document.getElementById('landingTime').addEventListener('change', recalculateDuration);
</script>
{% endblock %}
